// This file was generated by counterfeiter
package gamefakes

import (
	"sync"

	"github.com/Bo0mer/cowbull/game"
)

type FakeGuesser struct {
	GuessStub        func(n int) (string, error)
	guessMutex       sync.RWMutex
	guessArgsForCall []struct {
		n int
	}
	guessReturns struct {
		result1 string
		result2 error
	}
	TellStub        func(string, int, int) error
	tellMutex       sync.RWMutex
	tellArgsForCall []struct {
		arg1 string
		arg2 int
		arg3 int
	}
	tellReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGuesser) Guess(n int) (string, error) {
	fake.guessMutex.Lock()
	fake.guessArgsForCall = append(fake.guessArgsForCall, struct {
		n int
	}{n})
	fake.recordInvocation("Guess", []interface{}{n})
	fake.guessMutex.Unlock()
	if fake.GuessStub != nil {
		return fake.GuessStub(n)
	} else {
		return fake.guessReturns.result1, fake.guessReturns.result2
	}
}

func (fake *FakeGuesser) GuessCallCount() int {
	fake.guessMutex.RLock()
	defer fake.guessMutex.RUnlock()
	return len(fake.guessArgsForCall)
}

func (fake *FakeGuesser) GuessArgsForCall(i int) int {
	fake.guessMutex.RLock()
	defer fake.guessMutex.RUnlock()
	return fake.guessArgsForCall[i].n
}

func (fake *FakeGuesser) GuessReturns(result1 string, result2 error) {
	fake.GuessStub = nil
	fake.guessReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeGuesser) Tell(arg1 string, arg2 int, arg3 int) error {
	fake.tellMutex.Lock()
	fake.tellArgsForCall = append(fake.tellArgsForCall, struct {
		arg1 string
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	fake.recordInvocation("Tell", []interface{}{arg1, arg2, arg3})
	fake.tellMutex.Unlock()
	if fake.TellStub != nil {
		return fake.TellStub(arg1, arg2, arg3)
	} else {
		return fake.tellReturns.result1
	}
}

func (fake *FakeGuesser) TellCallCount() int {
	fake.tellMutex.RLock()
	defer fake.tellMutex.RUnlock()
	return len(fake.tellArgsForCall)
}

func (fake *FakeGuesser) TellArgsForCall(i int) (string, int, int) {
	fake.tellMutex.RLock()
	defer fake.tellMutex.RUnlock()
	return fake.tellArgsForCall[i].arg1, fake.tellArgsForCall[i].arg2, fake.tellArgsForCall[i].arg3
}

func (fake *FakeGuesser) TellReturns(result1 error) {
	fake.TellStub = nil
	fake.tellReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGuesser) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.guessMutex.RLock()
	defer fake.guessMutex.RUnlock()
	fake.tellMutex.RLock()
	defer fake.tellMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeGuesser) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ game.Guesser = new(FakeGuesser)
