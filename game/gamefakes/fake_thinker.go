// This file was generated by counterfeiter
package gamefakes

import (
	"sync"

	"github.com/Bo0mer/cowbull/game"
)

type FakeThinker struct {
	ThinkStub        func() (int, error)
	thinkMutex       sync.RWMutex
	thinkArgsForCall []struct{}
	thinkReturns     struct {
		result1 int
		result2 error
	}
	TryStub        func(string) (cows int, bulls int, err error)
	tryMutex       sync.RWMutex
	tryArgsForCall []struct {
		arg1 string
	}
	tryReturns struct {
		result1 int
		result2 int
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeThinker) Think() (int, error) {
	fake.thinkMutex.Lock()
	fake.thinkArgsForCall = append(fake.thinkArgsForCall, struct{}{})
	fake.recordInvocation("Think", []interface{}{})
	fake.thinkMutex.Unlock()
	if fake.ThinkStub != nil {
		return fake.ThinkStub()
	} else {
		return fake.thinkReturns.result1, fake.thinkReturns.result2
	}
}

func (fake *FakeThinker) ThinkCallCount() int {
	fake.thinkMutex.RLock()
	defer fake.thinkMutex.RUnlock()
	return len(fake.thinkArgsForCall)
}

func (fake *FakeThinker) ThinkReturns(result1 int, result2 error) {
	fake.ThinkStub = nil
	fake.thinkReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeThinker) Try(arg1 string) (cows int, bulls int, err error) {
	fake.tryMutex.Lock()
	fake.tryArgsForCall = append(fake.tryArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Try", []interface{}{arg1})
	fake.tryMutex.Unlock()
	if fake.TryStub != nil {
		return fake.TryStub(arg1)
	} else {
		return fake.tryReturns.result1, fake.tryReturns.result2, fake.tryReturns.result3
	}
}

func (fake *FakeThinker) TryCallCount() int {
	fake.tryMutex.RLock()
	defer fake.tryMutex.RUnlock()
	return len(fake.tryArgsForCall)
}

func (fake *FakeThinker) TryArgsForCall(i int) string {
	fake.tryMutex.RLock()
	defer fake.tryMutex.RUnlock()
	return fake.tryArgsForCall[i].arg1
}

func (fake *FakeThinker) TryReturns(result1 int, result2 int, result3 error) {
	fake.TryStub = nil
	fake.tryReturns = struct {
		result1 int
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeThinker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.thinkMutex.RLock()
	defer fake.thinkMutex.RUnlock()
	fake.tryMutex.RLock()
	defer fake.tryMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeThinker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ game.Thinker = new(FakeThinker)
