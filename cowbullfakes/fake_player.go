// This file was generated by counterfeiter
package cowbullfakes

import (
	"sync"

	"github.com/Bo0mer/cowbull"
)

type FakePlayer struct {
	IDStub        func() string
	iDMutex       sync.RWMutex
	iDArgsForCall []struct{}
	iDReturns     struct {
		result1 string
	}
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
	}
	AnnouncePlayersStub        func([]cowbull.PlayerEntry) error
	announcePlayersMutex       sync.RWMutex
	announcePlayersArgsForCall []struct {
		arg1 []cowbull.PlayerEntry
	}
	announcePlayersReturns struct {
		result1 error
	}
	ThinkStub        func() (int, error)
	thinkMutex       sync.RWMutex
	thinkArgsForCall []struct{}
	thinkReturns     struct {
		result1 int
		result2 error
	}
	TryStub        func(string) (cows int, bulls int, err error)
	tryMutex       sync.RWMutex
	tryArgsForCall []struct {
		arg1 string
	}
	tryReturns struct {
		result1 int
		result2 int
		result3 error
	}
	GuessStub        func(n int) (string, error)
	guessMutex       sync.RWMutex
	guessArgsForCall []struct {
		n int
	}
	guessReturns struct {
		result1 string
		result2 error
	}
	TellStub        func(string, int, int) error
	tellMutex       sync.RWMutex
	tellArgsForCall []struct {
		arg1 string
		arg2 int
		arg3 int
	}
	tellReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePlayer) ID() string {
	fake.iDMutex.Lock()
	fake.iDArgsForCall = append(fake.iDArgsForCall, struct{}{})
	fake.recordInvocation("ID", []interface{}{})
	fake.iDMutex.Unlock()
	if fake.IDStub != nil {
		return fake.IDStub()
	} else {
		return fake.iDReturns.result1
	}
}

func (fake *FakePlayer) IDCallCount() int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return len(fake.iDArgsForCall)
}

func (fake *FakePlayer) IDReturns(result1 string) {
	fake.IDStub = nil
	fake.iDReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakePlayer) Name() string {
	fake.nameMutex.Lock()
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	} else {
		return fake.nameReturns.result1
	}
}

func (fake *FakePlayer) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakePlayer) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakePlayer) AnnouncePlayers(arg1 []cowbull.PlayerEntry) error {
	var arg1Copy []cowbull.PlayerEntry
	if arg1 != nil {
		arg1Copy = make([]cowbull.PlayerEntry, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.announcePlayersMutex.Lock()
	fake.announcePlayersArgsForCall = append(fake.announcePlayersArgsForCall, struct {
		arg1 []cowbull.PlayerEntry
	}{arg1Copy})
	fake.recordInvocation("AnnouncePlayers", []interface{}{arg1Copy})
	fake.announcePlayersMutex.Unlock()
	if fake.AnnouncePlayersStub != nil {
		return fake.AnnouncePlayersStub(arg1)
	} else {
		return fake.announcePlayersReturns.result1
	}
}

func (fake *FakePlayer) AnnouncePlayersCallCount() int {
	fake.announcePlayersMutex.RLock()
	defer fake.announcePlayersMutex.RUnlock()
	return len(fake.announcePlayersArgsForCall)
}

func (fake *FakePlayer) AnnouncePlayersArgsForCall(i int) []cowbull.PlayerEntry {
	fake.announcePlayersMutex.RLock()
	defer fake.announcePlayersMutex.RUnlock()
	return fake.announcePlayersArgsForCall[i].arg1
}

func (fake *FakePlayer) AnnouncePlayersReturns(result1 error) {
	fake.AnnouncePlayersStub = nil
	fake.announcePlayersReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePlayer) Think() (int, error) {
	fake.thinkMutex.Lock()
	fake.thinkArgsForCall = append(fake.thinkArgsForCall, struct{}{})
	fake.recordInvocation("Think", []interface{}{})
	fake.thinkMutex.Unlock()
	if fake.ThinkStub != nil {
		return fake.ThinkStub()
	} else {
		return fake.thinkReturns.result1, fake.thinkReturns.result2
	}
}

func (fake *FakePlayer) ThinkCallCount() int {
	fake.thinkMutex.RLock()
	defer fake.thinkMutex.RUnlock()
	return len(fake.thinkArgsForCall)
}

func (fake *FakePlayer) ThinkReturns(result1 int, result2 error) {
	fake.ThinkStub = nil
	fake.thinkReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakePlayer) Try(arg1 string) (cows int, bulls int, err error) {
	fake.tryMutex.Lock()
	fake.tryArgsForCall = append(fake.tryArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Try", []interface{}{arg1})
	fake.tryMutex.Unlock()
	if fake.TryStub != nil {
		return fake.TryStub(arg1)
	} else {
		return fake.tryReturns.result1, fake.tryReturns.result2, fake.tryReturns.result3
	}
}

func (fake *FakePlayer) TryCallCount() int {
	fake.tryMutex.RLock()
	defer fake.tryMutex.RUnlock()
	return len(fake.tryArgsForCall)
}

func (fake *FakePlayer) TryArgsForCall(i int) string {
	fake.tryMutex.RLock()
	defer fake.tryMutex.RUnlock()
	return fake.tryArgsForCall[i].arg1
}

func (fake *FakePlayer) TryReturns(result1 int, result2 int, result3 error) {
	fake.TryStub = nil
	fake.tryReturns = struct {
		result1 int
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePlayer) Guess(n int) (string, error) {
	fake.guessMutex.Lock()
	fake.guessArgsForCall = append(fake.guessArgsForCall, struct {
		n int
	}{n})
	fake.recordInvocation("Guess", []interface{}{n})
	fake.guessMutex.Unlock()
	if fake.GuessStub != nil {
		return fake.GuessStub(n)
	} else {
		return fake.guessReturns.result1, fake.guessReturns.result2
	}
}

func (fake *FakePlayer) GuessCallCount() int {
	fake.guessMutex.RLock()
	defer fake.guessMutex.RUnlock()
	return len(fake.guessArgsForCall)
}

func (fake *FakePlayer) GuessArgsForCall(i int) int {
	fake.guessMutex.RLock()
	defer fake.guessMutex.RUnlock()
	return fake.guessArgsForCall[i].n
}

func (fake *FakePlayer) GuessReturns(result1 string, result2 error) {
	fake.GuessStub = nil
	fake.guessReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePlayer) Tell(arg1 string, arg2 int, arg3 int) error {
	fake.tellMutex.Lock()
	fake.tellArgsForCall = append(fake.tellArgsForCall, struct {
		arg1 string
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	fake.recordInvocation("Tell", []interface{}{arg1, arg2, arg3})
	fake.tellMutex.Unlock()
	if fake.TellStub != nil {
		return fake.TellStub(arg1, arg2, arg3)
	} else {
		return fake.tellReturns.result1
	}
}

func (fake *FakePlayer) TellCallCount() int {
	fake.tellMutex.RLock()
	defer fake.tellMutex.RUnlock()
	return len(fake.tellArgsForCall)
}

func (fake *FakePlayer) TellArgsForCall(i int) (string, int, int) {
	fake.tellMutex.RLock()
	defer fake.tellMutex.RUnlock()
	return fake.tellArgsForCall[i].arg1, fake.tellArgsForCall[i].arg2, fake.tellArgsForCall[i].arg3
}

func (fake *FakePlayer) TellReturns(result1 error) {
	fake.TellStub = nil
	fake.tellReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePlayer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.announcePlayersMutex.RLock()
	defer fake.announcePlayersMutex.RUnlock()
	fake.thinkMutex.RLock()
	defer fake.thinkMutex.RUnlock()
	fake.tryMutex.RLock()
	defer fake.tryMutex.RUnlock()
	fake.guessMutex.RLock()
	defer fake.guessMutex.RUnlock()
	fake.tellMutex.RLock()
	defer fake.tellMutex.RUnlock()
	return fake.invocations
}

func (fake *FakePlayer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cowbull.Player = new(FakePlayer)
